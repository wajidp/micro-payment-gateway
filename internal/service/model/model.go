package model

import (
	"errors"
	"fmt"

	"go.uber.org/zap/zapcore"
)

type RequestType int

const (
	Deposit RequestType = iota + 1
	Withdraw
)

var (
	ErrValidation          = errors.New("validation error")
	ErrInternal            = errors.New("internal error")
	ErrHttpResponseFailure = errors.New("Http response failure")
	ErrHttpRequestFailure  = errors.New("Http request failure")
)

func WrapError(errType error, message string) error {
	return fmt.Errorf("%w: %s", errType, message)
}

// payment request model
// PaymentRequest represents a request for a payment transaction, such as a deposit or withdrawal.
type PaymentRequest struct {
	// TransactionID is a unique identifier for the transaction.
	// It is typically generated by the service when the transaction is initiated.
	TransactionID string `json:"id"`

	// UserID represents the unique identifier of the user initiating the transaction.
	// This ID is used to link the transaction to the appropriate user account.
	UserID string `json:"userId"`

	// Currency denotes the currency type in which the transaction is being conducted.
	// It is typically represented by its ISO 4217 currency code (e.g., "USD", "EUR").
	Currency string `json:"currency"`

	// Amount is the amount of money involved in the transaction.
	// The value is usually expressed in the smallest unit of the currency (e.g., cents for USD).
	Amount int64 `json:"amount"`

	// Exponent defines the number of decimal places to be used in the amount. Optional
	// For example, an exponent of 2 would mean the amount is in cents if the currency is USD.
	Exponent int `json:"exponent"`

	// CountryCode represents the country where the transaction is being initiated. Optional
	// It is typically a two-letter ISO 3166-1 alpha-2 country code (e.g., "US" for the United States).
	CountryCode string `json:"country_code"`

	// Callback is a URL or endpoint where the service should send updates or results of the transaction.
	// This field is not serialized to JSON (indicated by `json:"-"`).
	Callback string `json:"-"`

	// Type indicates the type of the payment request (e.g., deposit or withdraw).
	// This field is also not serialized to JSON (indicated by `json:"-"`).
	Type RequestType `json:"-"`
}

// MarshalLogObject implements the zapcore.ObjectMarshaler interface to mask sensitive content
func (t *PaymentRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	// Mask sensitive fields
	enc.AddString("transaction_id", maskSensitiveData(t.TransactionID))
	enc.AddString("user_id", maskSensitiveData(t.UserID))
	// Log other fields normally
	enc.AddInt64("amount", t.Amount)
	enc.AddString("currency", t.Currency)
	return nil
}

// Mask sensitive data like transaction_id and user_id based on length
func maskSensitiveData(data string) string {
	if len(data) > 4 {
		return fmt.Sprintf("%s****%s", data[:2], data[len(data)-2:])
	}
	return "****"
}

// PaymentResponse represents the response returned after processing a payment request.
type PaymentResponse struct {
	// Status indicates the outcome of the transaction, such as "success" or "failure".
	Status string `json:"status"`

	// Message provides additional information or context about the transaction status.
	// It could contain error details or confirmation messages.
	Message string `json:"message"`

	// TransactionID is the unique identifier for the transaction associated with this response.
	// It should match the TransactionID provided in the PaymentRequest.
	TransactionID string `json:"id"`
}

// PgRoutingMaster represents the configuration details for routing payment requests
// to the appropriate payment gateway based on certain criteria.
type PgRoutingMaster struct {
	// Currency indicates the currency for which this routing configuration applies.
	// This is typically represented by its ISO 4217 currency code (e.g., "USD", "EUR").
	Currency string

	// CountryCode represents the country where this routing configuration is applicable.
	// It is typically a two-letter ISO 3166-1 alpha-2 country code (e.g., "US" for the United States).
	CountryCode string

	// PaymentGateway specifies the name or identifier of the payment gateway to be used
	// for transactions matching the specified currency and country code.
	PaymentGateway string

	// Active indicates whether this routing configuration is currently active or not.
	// If set to false, this configuration will be ignored.
	Active bool

	// MaxRetryCount defines the maximum number of retry attempts allowed for a transaction
	// if the initial attempt fails. This is useful for handling temporary issues with the payment gateway.
	MaxRetryCount int

	// Priority determines the order in which this routing configuration should be considered
	// relative to others. Lower values indicate higher priority, meaning this configuration
	// will be used before others with a higher priority value.
	Priority int
}

// PgRoutingMasters in memory slice for the routing data
var PgRoutingMasters = []*PgRoutingMaster{
	{"USD", "AE", "PGA", true, 3, 0},
	{"USD", "AE", "PGB", true, 3, 0},
	{"EUR", "EU", "PGA", true, 3, 0},
	{"AED", "US", "PGA", true, 3, 0},
}

// SupportedCurrencies supported currencies
var SupportedCurrencies = map[string]bool{
	"USD": true,
	"EUR": true,
	"AED": true,
}

// Wallet user wallet
type Wallet struct {
	Balance int64 // The balance
}

// Transaction represents a record of a financial transaction processed through the payment system.
type Transaction struct {
	// ID is the unique identifier for the transaction.
	ID string `json:"id"`

	// UserID is the identifier of the user associated with this transaction.
	UserID string `json:"userId"`

	// Amount specifies the amount of money involved in the transaction.
	// It is represented in the smallest unit of the currency (e.g., cents for USD).
	Amount int64 `json:"amount"`

	// Currency indicates the currency used for the transaction.
	// It is typically represented by its ISO 4217 currency code (e.g., "USD", "EUR").
	Currency string `json:"currency"`

	// Type specifies the nature of the transaction, such as "Deposit" or "Withdraw".
	Type string `json:"type"`

	// State reflects the current state of the transaction, such as "authorized", "approved", or "failed".
	State string `json:"state"`
}

// Constants representing the possible states of a transaction.
const (
	// StateAuthorized indicates that the transaction has been authorized but not yet completed.
	StateAuthorized = "authorized"

	// StateApproved indicates that the transaction has been successfully completed and approved.
	StateApproved = "approved"

	// StateFailed indicates that the transaction could not be completed successfully.
	StateFailed = "failed"
)

// CallbackRequest represents the request payload used to update the status of a transaction.
type CallbackRequest struct {
	// TransactionID is the unique identifier of the transaction that is being updated.
	TransactionID string `json:"transaction_id"`

	// State specifies the new state of the transaction, such as "approved" or "failed".
	State string `json:"state"`
}

// WalletRepository defines the methods required for interacting with the wallet and transaction data store.
type WalletRepository interface {
	// GetWallet retrieves the wallet associated with the given userID.
	// It returns the wallet or an error if the wallet could not be retrieved.
	GetWallet(userID string) (*Wallet, error)

	// UpdateWallet updates the wallet data for the user specified by userID.
	// It takes the updated wallet data and returns an error if the update fails.
	UpdateWallet(userID string, wallet *Wallet) error

	// GetTransaction retrieves the transaction associated with the given txnID.
	// It returns the transaction or an error if the transaction could not be found.
	GetTransaction(txnID string) (*Transaction, error)

	// UpdateTransaction updates the transaction record in the data store.
	// It takes the updated transaction data and returns an error if the update fails.
	UpdateTransaction(txn *Transaction) error
}
